基于python=3.6；pytorch1.9.1+cu111；

数据来源：tushare

模型使用简易的LSTM的基本结构，中间加dropout层参数为0.2防止数据过拟合；

模型结构中使用[batch_size,samples,features]的输入数据，其中samples为连续的交易日信息构成的序列，程序中设定为30天；模型隐藏层大小为32，训练步长lr=0.005；

模型的训练数据为为601186.SH的2018-01-02到2023-12-29日的ohlc、vol、pe、pb等的42项影响因子作为训练特征，利用MinMaxScaler对于标签数据进行标准化处理设置范围在[-10,10](经过验证这个范围效果局部最优)。close作为标签对模型计算MSEloss的计算并利用Adam优化器进行优化。

模型训练结果在训练集上损失约为0.2±0.1；测试集损失约为3±1.2



交易策略为最简单的择时策略，将模型预测的价格作为交易方向信号传入策略，对比上一次预测的结果追涨杀跌进行操作，每次遇见下跌信号则出手所有当前股票；遇见买入信号则将剩余现金池中的1/3用于买入。



具体项目文件中main.py是作为数据导入功能调用tushare的api接口读取因子数据，行情数据以及公司基本数据；将三组数据合并后输出至.csv文件中

model.py文件中StockPriceRegressor类为模型的定义，其中定义了模型结构和前向传播；create_sequences函数是读取保存的股票历史数据文件并处理成模型训练需要的[Samples,features]的形式；strategy函数是将模型预测的结果按照涨跌信号进行执行并计算策略总值。正文开头是模型的实例化与定义以及数据的处理；注释部分是模型的训练部分；最后则是读取训练好的模型并进行预测、策略执行、回测与结果图片绘制。

ResShow文件夹为结果策略执行的结果绘制的图片文件。



模型预测的结果优秀但十分不稳定，收益率高但最大回撤也较高。关于模型的优化可以通过三个方面进行，第一通过增加对于模型的训练的数据样本同时对于模型的结构进行多次的测试进行优化，其可能达到更稳定；第二可以将模型的因子数继续增加提升，同时可以将大盘中的其他多支股票的数据进行数据进行处理并提升[Sample,feature]的维度以通过大盘的趋势增加模型的准确性；第三个方法则是基于第二个方法的基础上进行选股的优化，通过简单的基本策略选择训练的样本，如双均线或机器学习方法进行对于数据源的选择。而由于我在本地对于模型搭建收到电脑性能以及数据量存储等的一系列相关限制，无法针对于这三个优化项目进行实现。